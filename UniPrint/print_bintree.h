/******************************************************************************************
* Data Structures in C++ -- 二叉树输出打印
* 丁酉鸡年二月 2017/3/18 11:40
* @author 西唐王, xtwyzh@gmail.com, xtwroot.com
* xtwroot Copyright (c) 2017. All rights reserved.
******************************************************************************************/

#pragma once



///******************************************************************************************
//* 基于BinTree实现的BST
//******************************************************************************************/
//template <typename T> //元素类型
//void UniPrint::p(BST<T> & bt) { //引用
//	printf("%s[%d]*%d:\n", typeid (bt).name(), &bt, bt.size()); //基本信息
//	Bitmap* branchType = new Bitmap; //记录当前节点祖先的方向
//	printBinTree(bt.root(), -1, ROOT, branchType); //树状结构
//	release(branchType); printf("\n");
//}
//
///******************************************************************************************
//* 基于BST实现的AVL
//* 其中调用的BinNode的打印例程，可以显示BF状态
//******************************************************************************************/
//template <typename T> //元素类型
//void UniPrint::p(AVL<T> & avl) { //引用
//	printf("%s[%d]*%d:\n", typeid (avl).name(), &avl, avl.size()); //基本信息
//	Bitmap* branchType = new Bitmap; //记录当前节点祖先的方向
//	printBinTree(avl.root(), -1, ROOT, branchType); //树状结构
//	release(branchType); printf("\n");
//}
//
///******************************************************************************************
//* 基于BST实现的RedBlack
//* 其中调用的BinNode的打印例程，可以显示BF状态
//******************************************************************************************/
//template <typename T> //元素类型
//void UniPrint::p(RedBlack<T> & rb) { //引用
//	printf("%s[%d]*%d:\n", typeid (rb).name(), &rb, rb.size()); //基本信息
//	Bitmap* branchType = new Bitmap; //记录当前节点祖先的方向
//	printBinTree(rb.root(), -1, ROOT, branchType); //树状结构
//	release(branchType); printf("\n");
//}
//
///******************************************************************************************
//* 基于BST实现的Splay
//* 鉴于Splay不必设置bf之类的附加标识，其打印例程与BST完全一致
//******************************************************************************************/
//template <typename T> //元素类型
//void UniPrint::p(Splay<T> & bt) { //引用
//	printf("%s[%d]*%d:\n", typeid (bt).name(), &bt, bt.size()); //基本信息
//	Bitmap* branchType = new Bitmap; //记录当前节点祖先的方向
//	printBinTree(bt.root(), -1, ROOT, branchType); //树状结构
//	release(branchType); printf("\n");
//}



